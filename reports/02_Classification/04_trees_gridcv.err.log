Traceback (most recent call last):
  File "/Users/eatai/.pyenv/versions/3.13.1/envs/datascience/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/Users/eatai/.pyenv/versions/3.13.1/envs/datascience/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/eatai/.pyenv/versions/3.13.1/envs/datascience/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/Users/eatai/.pyenv/versions/3.13.1/lib/python3.13/asyncio/base_events.py", line 720, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/Users/eatai/.pyenv/versions/3.13.1/envs/datascience/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/Users/eatai/.pyenv/versions/3.13.1/envs/datascience/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/eatai/.pyenv/versions/3.13.1/envs/datascience/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------

fig, axs = plt.subplots(1,5, figsize = (20,4), sharey = True)

for ax, depth in zip(axs, [1, 2, 3, 5, 10]):
    tree_clf = DecisionTreeClassifier(max_depth=depth)
    tree_clf.fit(X_train, y_train)
    
    y_pred = tree_clf.predict(X_test)
    
    cmap = mpl.colors.ListedColormap(['red', 'green', 'blue'])    # Training Data

    DecisionBoundaryDisplay.from_estimator(
        estimator = tree_clf, X = X,
        cmap = cmap, alpha = 0.25,
        ax = ax
    )
    
    ax.scatter(X_train.iloc[:,0], X_train.iloc[:,1], 
               c = y_train, cmap = cmap, marker = 'x')
    
    # Testing Data
    ax.scatter(X_test.iloc[:,0], X_test.iloc[:,1], 
               c = y_test, cmap = cmap, marker = '.')
    
    ax.set_title(f'Tree depth of {depth}')

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[5], line 9[0m
[1;32m      5[0m tree_clf[38;5;241m.[39mfit(X_train, y_train)
[1;32m      7[0m y_pred [38;5;241m=[39m tree_clf[38;5;241m.[39mpredict(X_test)
[0;32m----> 9[0m cmap [38;5;241m=[39m [43mmpl[49m[38;5;241m.[39mcolors[38;5;241m.[39mListedColormap([[38;5;124m'[39m[38;5;124mred[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mgreen[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mblue[39m[38;5;124m'[39m])    [38;5;66;03m# Training Data[39;00m
[1;32m     11[0m DecisionBoundaryDisplay[38;5;241m.[39mfrom_estimator(
[1;32m     12[0m     estimator [38;5;241m=[39m tree_clf, X [38;5;241m=[39m X,
[1;32m     13[0m     cmap [38;5;241m=[39m cmap, alpha [38;5;241m=[39m [38;5;241m0.25[39m,
[1;32m     14[0m     ax [38;5;241m=[39m ax
[1;32m     15[0m )
[1;32m     17[0m ax[38;5;241m.[39mscatter(X_train[38;5;241m.[39miloc[:,[38;5;241m0[39m], X_train[38;5;241m.[39miloc[:,[38;5;241m1[39m], 
[1;32m     18[0m            c [38;5;241m=[39m y_train, cmap [38;5;241m=[39m cmap, marker [38;5;241m=[39m [38;5;124m'[39m[38;5;124mx[39m[38;5;124m'[39m)

[0;31mNameError[0m: name 'mpl' is not defined

